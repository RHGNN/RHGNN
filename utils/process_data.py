import numpy as npfrom torch_geometric.data import Datadef GetData(name):    path = '../data/' + name + '/'    data = Data()    knownindex = None    data.x = np.load(path + 'x_input_features.npy')    data.y = np.load(path + 'y_labels.npy')    data.edge_index = np.load(path + 'edge_index.npy')    data.edge_type = np.load(path + 'edge_type.npy')    if 'DBLP' in name:        knownindex = np.load(path + 'knownindex.npy')    elif 'SLAP' in name:        knownindex = np.load(path + 'knownindex.npy')    return data, knownindexdef transfer_idx_to_mask(num_nodes, train_idx, test_idx):    train_mask = np.zeros(num_nodes)    test_mask = np.zeros(num_nodes)    for i in range(len(train_idx)):        train_mask[train_idx[i]] = 1    for i in range(len(test_idx)):        test_mask[test_idx[i]] = 1    return train_mask, test_maskdef split_data(samples, knownindex):    Kholdoutvalidation = 5    index = np.random.randint(0, Kholdoutvalidation, (samples, 1)) > 0    train_idx, test_idx = np.where(index == True)[0], np.where(index == False)[0]    if knownindex is not None:        train_idx = list(set(knownindex).intersection(train_idx))        test_idx = list(set(knownindex).intersection(test_idx))    train_mask, test_mask = transfer_idx_to_mask(samples, train_idx, test_idx)    return train_mask, test_mask